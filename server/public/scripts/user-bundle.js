/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/user.js":
/*!*************************!*\
  !*** ./scripts/user.js ***!
  \*************************/
/***/ (() => {

eval("document.addEventListener(\"DOMContentLoaded\", function () {\n  const username = document.getElementById(\"name\");\n  const showList = document.getElementById(\"all\");\n  const ticketsList = document.getElementById(\"allTickets\");\n\n  /**\n  * retrieve information about the current user\n  */\n  async function getUser() {\n    const requestOptions = {\n      method: \"GET\",\n    };\n    const response = await fetch(\"/user/me\", requestOptions);\n    if (response.ok) {\n      const user = await response.json();\n      username.innerText = user.name || \"\";\n    } else {\n      const error = await response.json();\n      handleError(error);\n    }\n  }\n\n  /**\n  * manages the display of shows\n  */\n  async function displayShows() {\n    const response = await fetch(\"/user/adminShows\");\n    if (!response.ok) {\n      console.log(\"erreur récuperation des spectacles\");\n      handleError(await response.json());\n    }\n    const shows = await response.json();\n    console.log(\"shows:\", shows);\n    shows.forEach((show) => {\n      const infoShow = document.createElement(\"div\");\n      infoShow.id = \"spectacle-info\";\n      infoShow.innerHTML = `\n          <span><span id=\"nameShow\">${show.description}</span> : <b><span id=\"nbPlace\"> ${show.tickets}</span></b> places </span>\n          <button class=\"addTicket\" data-show-id=\"${show._id}\">Ticket</button>\n        `;\n      showList.appendChild(infoShow);\n    });\n  }\n\n  /**\n  * manages the display of tickets\n  */\n  async function displayTickets() {\n    handleAdminDeleteShow();\n    const response = await fetch(\"/user/me\");\n    console.log(response);\n    if (!response.ok) {\n      console.log(\"erreur récuperation des tickets\");\n      handleError(await response.json());\n    }\n    const userData = await response.json();\n    const tickets = userData.tickets;\n    console.log(\"tickets:\", tickets);\n    ticketsList.innerHTML = \"\";\n    tickets.forEach((ticket) => {\n      const ticketInfo = document.createElement(\"div\");\n      ticketInfo.id = \"ticket-info\";\n      ticketInfo.innerHTML = `\n          <span><span id=\"nameShow\">${ticket.description}</span> : <b><span id=\"nbTicket\">${ticket.nb}</span></b> ticket </span>\n          <button class=\"deleteTicket\" data-ticket-id=\"${ticket._id}\">Annuler</button>\n        `;\n      ticketsList.appendChild(ticketInfo);\n    });\n  }\n\n  /**\n  * manage the reservation of a show\n  * @param {ObjectId} showId - The id of the show\n  */\n  async function takeTicket(showId) {\n    const nbTickets = prompt(\"Combien de tickets voulez-vous réserver ?\");\n    const ticketsToTake = parseInt(nbTickets);\n    if (nbTickets && ticketsToTake > 0) {\n      for (let i = 0; i < ticketsToTake; i++) {\n        const response_post = await fetch(`/user/takeTicket/${showId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        if (!response_post.ok) {\n          console.log(\"erreur réservation de ticket\");\n          handleError(await response.json());\n        }\n        const showData = await response_post.json();\n        const description = showData.description;\n        const response_put = await fetch(`/user/takeTicket`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ description }),\n        });\n        if (!response_put.ok) {\n          console.log(\"erreur mise à jour du ticket\");\n          handleError(await response.json());\n        }\n      }\n        displayTickets();\n    } else {\n      console.log(\"Veuillez saisir un nombre valide de tickets.\");\n    }\n  }\n\n  // handle the reservation of a show\n  showList.addEventListener(\"click\", function (event) {\n    if (event.target.classList.contains(\"addTicket\")) {\n      const showId = event.target.dataset.showId;\n      takeTicket(showId);\n    }\n  });\n\n  /**\n  * manages the deletion of shows that are no longer available\n  */\n  async function handleAdminDeleteShow() {\n    const response = await fetch(\"/user/adminShows\");\n    if (!response.ok) {\n      console.log(\"erreur récupération des spectacles\");\n      handleError(await response.json());\n    }\n    const shows = await response.json();\n    const response2 = await fetch(\"/user/me\");\n    if (!response2.ok) {\n      console.log(\"erreur récupération des tickets\");\n      handleError(await response.json());\n    }\n    const user = await response2.json();\n    user.tickets.forEach((ticket) => {\n      const show = shows.find(\n        (show) => show.description === ticket.description\n      );\n      if (!show) {\n        deleteTicket(ticket._id);\n      }\n    });\n  }\n\n  /**\n  * manages the deletion of tickets\n  */\n  async function deleteTicket(ticketId) {\n    const response = await fetch(`/user/deleteTicket/${ticketId}`, {\n      method: \"DELETE\",\n    });\n    if (response.ok) {\n      displayTickets();\n    } else {\n      const error = await response.json();\n      handleError(error);\n    }\n  }\n\n  // handle the deletion of tickets\n  ticketsList.addEventListener(\"click\", async function (event) {\n    if (event.target.classList.contains(\"deleteTicket\")) {\n      const ticketId = event.target.dataset.ticketId;\n      await deleteTicket(ticketId);\n    }\n  });\n\n  getUser();\n  displayTickets();\n  displayShows();\n\n  const handleError = (error) => {\n    if (error.redirectTo) window.location.href = error.redirectTo;\n    else console.log(`erreur : ${error.message}`);\n  };\n\n  const logout = async () => {\n    const requestOptions = {\n      method: \"GET\",\n    };\n    const response = await fetch(`/access/logout`, requestOptions);\n    if (response.ok) {\n      window.location.href = \"/\";\n    }\n  };\n\n  // manage when the user wants to log out\n  document.getElementById(\"disconnect\").addEventListener(\"click\", logout);\n});\n\n\n//# sourceURL=webpack://client/./scripts/user.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/user.js"]();
/******/ 	
/******/ })()
;